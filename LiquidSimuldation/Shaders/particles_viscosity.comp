#version 430 core
#include "common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticlesInput
{
    Particle particles[];
};
layout(std430, binding = 1) buffer GridInput
{
    GridCell grid[];
};
layout(std430, binding = 2) buffer PairsOutput
{
    int pairs_count;
    PairData pairs[];
};

layout(std140, binding = 0) uniform ConfigInput { Config config; };
layout(location = 1) uniform float dt;
layout(location = 2) uniform ivec2 gridSize;
layout(location = 3) uniform ivec2 offset;

void main() {
	ivec2 gridPos = ivec2(gl_GlobalInvocationID.xy) * 3 + offset;
	GridCell orgCell = grid[gridPos.y * gridSize.x + gridPos.x];

	for (int i = orgCell.pairs_start; i < orgCell.pairs_end; ++i) {
		PairData pair = pairs[i];

		float inertia = dot(particles[pair.first].velosity - particles[pair.second].velosity, pair.normal);
		if (inertia <= 0) continue;

		vec2 inertiaViscocity = float(
			0.5 * dt * pair.proximityCoefficient *
			(config.kLinearViscocity * inertia + config.kQuadraticViscocity * pow(inertia, 2))) *
			pair.normal;

		particles[pair.first].velosity -= inertiaViscocity;
		particles[pair.second].velosity += inertiaViscocity;
	}
}