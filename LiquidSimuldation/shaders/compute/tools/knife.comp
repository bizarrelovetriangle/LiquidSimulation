#version 430 core
#include "../../common.glsl"
#define _precision 0.000001

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(location = 0) uniform vec2 scratch_a;
layout(location = 1) uniform vec2 scratch_b;

float cross(vec2 a, vec2 b);

void main() {
	int threads_chunk_size = int(ceil(float(pairs_count) / parallel));

	int start = int(gl_GlobalInvocationID.x) * threads_chunk_size;
	int end = min(start + threads_chunk_size, pairs_count);

	if (start >= pairs_count) return;
	
	for (int i = start; i < end; ++i) {
		if (pairs[i].torn) continue;
		vec2 pair_a = particles[pairs[i].first].position;
		vec2 pair_b = particles[pairs[i].second].position;

		vec2 scratch_a_b = scratch_a - scratch_b;
		vec2 pair_a_b = pair_a - pair_b;

		bool opposide_scratch =
			cross(pair_a - scratch_b, scratch_a_b) > 0 !=
			cross(pair_b - scratch_b, scratch_a_b) > 0;
		bool opposide_pair =
			cross(scratch_a - pair_b, pair_a_b) > 0 !=
			cross(scratch_b - pair_b, pair_a_b) > 0;

		if (opposide_scratch && opposide_pair) {
			pairs[i].torn = true;
		}
	}
}

float cross(vec2 a, vec2 b) {
	return a.x * b.y - a.y * b.x;
}
