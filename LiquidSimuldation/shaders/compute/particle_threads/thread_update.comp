#version 430 core
#include "../../common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticleThreadCountsOutput
{
	int particle_thread_counts[];
};
layout(std430, binding = 1) buffer ParticleThreadOffsetsOutput
{
	int particle_thread_offsets[];
};

void main() {
	int threads_chunk_size = int(ceil(float(threads_count) / parallel));

	int start = int(gl_GlobalInvocationID.x) * threads_chunk_size;
	int end = min(start + threads_chunk_size, threads_count);

	if (start >= threads_count) return;
	
	for (int i = start; i < end; ++i) {
		if (threads[i].torn) continue;
		int particle_index = threads[i].first;
		int thread_index = atomicAdd(particle_thread_offsets[particle_index], 1);
		threads_temp[thread_index] = threads[i];
		atomicAdd(threads_count_temp, 1);
	}
}
