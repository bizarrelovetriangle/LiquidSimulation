#version 430 core
#include "../../common.glsl"

layout(local_size_x = 4, local_size_y = 2, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticlesInput
{
	Particle particles[];
};
layout(std430, binding = 1) buffer GridInput
{
	GridCell grid[];
};
layout(std430, binding = 2) buffer PairsCount
{
	int pairs_count;
};
layout(std430, binding = 3) buffer PairsOutput
{
	PairData pairs[];
};
layout(std430, binding = 4) buffer BucketsCountOutput
{
	int buckets[];
};

layout(location = 0) uniform int chunk_size;

void main() {
	uint dim = gl_LocalInvocationID.y;
	uint shift_num = 8 * gl_LocalInvocationID.x;
	const uint buckets_size = 1 << 8;
	const uint mask = buckets_size - 1;
	uint buckets_start = gl_GlobalInvocationID.y * gl_GlobalInvocationID.x * buckets_size;

	uint pairs_start = gl_GlobalInvocationID.x * chunk_size;
	uint pairs_end = min(pairs_start + chunk_size, pairs_count);

	for (uint i = pairs_start; i < pairs_end; ++i) {
		ivec2 pos = particles[pairs[i].first].gridPosition;
		uint value = dim == 0 ? pos.x : pos.y;
		uint hash = value >> shift_num & mask;
		atomicAdd(buckets[buckets_start + hash], 1);
	}
}
