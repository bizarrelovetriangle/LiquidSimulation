#version 430 core
#include "../../common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticlesInput
{
	Particle particles[];
};
layout(std430, binding = 1) buffer GridInput
{
	GridCell grid[];
};
layout(std430, binding = 2) buffer PairsCount
{
	int pairs_count;
};
layout(std430, binding = 3) buffer PairsOutput
{
	PairData pairs[];
};

layout(std140, binding = 0) uniform ConfigInput { Config config; };
layout(location = 1) uniform ivec2 grid_size;

void main() {
	uint org = gl_GlobalInvocationID.x;
	particles[org].density = 0.;
	particles[org].density_near = 0.;
	Range range = GetRange(grid_size, particles[org].grid_position);

	for (int y = range.a.y; y <= range.b.y; ++y) {
		for (int x = range.a.x; x <= range.b.x; ++x) {
			GridCell nghrCell = grid[y * grid_size.x + x];

			for (uint i = nghrCell.particles_start; i < nghrCell.particles_end; ++i) {
				if (particles[org].index == particles[i].index) continue;

				float dist = distance(particles[org].position, particles[i].position);
				if (dist > config.interactionRange) continue;

				float proximity_coefficient = 1 - dist / config.interactionRange;
				particles[org].density += pow(proximity_coefficient, 2);
				particles[org].density_near += pow(proximity_coefficient, 3);
			}
		}
	}
}
