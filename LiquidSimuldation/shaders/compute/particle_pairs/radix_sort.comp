#version 430 core
#include "../../common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticlesInput
{
	Particle particles[];
};
layout(std430, binding = 1) buffer PairsCount
{
	int pairs_count;
};
layout(std430, binding = 2) buffer PairsOutput
{
	PairData pairs[];
};
layout(std430, binding = 3) buffer PairsTempOutput
{
	PairData pairs_temp[];
};
layout(std430, binding = 4) buffer BucketIndexesCountOutput
{
	int bucket_indexes[];
};

layout(location = 0) uniform ivec2 gridSize;
layout(location = 1) uniform int dim;
layout(location = 2) uniform int byte;

void main() {
	const int chunk_size = 8;
	const int buckets_size = 1 << chunk_size;
	const int mask = buckets_size - 1;
	const int shift = byte * 8;

	const int buckets_start = (dim * 4 + byte) * buckets_size;

	for (int i = 0; i < pairs_count; ++i) {
		ivec2 pos = particles[pairs[i].first].gridPosition;
		int value = dim == 0 ? pos.x : pos.y;
		int hash = value >> shift & mask;
		int index = bucket_indexes[buckets_start + hash]++;
		pairs_temp[index] = pairs[i];
	}
}
