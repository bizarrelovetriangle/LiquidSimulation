#version 430 core
#include "../../common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticlesInput
{
	Particle particles[];
};
layout(std430, binding = 1) buffer GridInput
{
	GridCell grid[];
};
layout(std430, binding = 2) buffer PairsCount
{
	int pairs_count;
};
layout(std430, binding = 3) buffer PairsOutput
{
	PairData pairs[];
};
layout(std430, binding = 4) buffer ParticleIndexesInput
{
	int particle_indexes[];
};

layout(std140, binding = 0) uniform ConfigInput { Config config; };
layout(location = 1) uniform ivec2 grid_size;

void main() {
	int org = particle_indexes[gl_GlobalInvocationID.x];
	if (!particles[org].sticky) return;
	particles[org].sticky = false;

	Range range = GetRange(grid_size, particles[org].grid_position);

	for (int y = range.a.y; y <= range.b.y; ++y) {
		for (int x = range.a.x; x <= range.b.x; ++x) {
			GridCell nghrCell = grid[y * grid_size.x + x];

			for (int i = nghrCell.start; i < nghrCell.end; ++i) {
				int index = particle_indexes[i];
				if (particles[org].index == particles[index].index) continue;

				vec2 vector = particles[index].position - particles[org].position;
				float dist = length(vector);
				//if (dist > config.interactionRange || dist == 0) continue;
				vec2 normal = vector / dist;
				float proximity_coefficient = 1 - dist / config.interactionRange;

				int pair_id = atomicAdd(pairs_count, 1);
				pairs[pair_id].first = org;
				pairs[pair_id].second = index;
				pairs[pair_id].normal = normal;
				pairs[pair_id].proximity_coefficient = proximity_coefficient;
				pairs[pair_id].rest_length = dist;
			}
		}
	}
}
