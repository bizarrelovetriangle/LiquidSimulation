#version 430 core
#include "../../common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer ParticlesInput
{
	Particle particles[];
};
layout(std430, binding = 1) buffer GridInput
{
	GridCell grid[];
};
layout(std430, binding = 2) buffer PairsCount
{
	int pairs_count;
};
layout(std430, binding = 3) buffer PairsOutput
{
	PairData pairs[];
};
layout(std430, binding = 4) buffer ParticleIndexesInput
{
	int particle_indexes[];
};
layout(std430, binding = 5) buffer ParticleThreads
{
	GridCell particle_threads[];
};

layout(std140, binding = 0) uniform ConfigInput { Config config; };
layout(location = 1) uniform ivec2 grid_size;
layout(location = 2) uniform float dt;

void main() {
	uint org = particle_indexes[gl_GlobalInvocationID.x];
	Range range = GetRange(grid_size, particles[org].grid_position);
	
	for (int y = range.a.y; y <= range.b.y; ++y) {
		for (int x = range.a.x; x <= range.b.x; ++x) {
			GridCell nghrCell = grid[y * grid_size.x + x];
	
			for (int i = nghrCell.start; i < nghrCell.end; ++i) {
				int index = particle_indexes[i];
				if (particles[org].index == particles[index].index) continue;
	
				vec2 vector = particles[index].position - particles[org].position;
				float dist = length(vector);
	
				if (dist > config.interactionRange || dist == 0) continue;
	
				vec2 normal = vector / dist;
				float proximity_coefficient = 1 - dist / config.interactionRange;
	
				// viscosity
				float inertia = dot(particles[org].velosity - particles[index].velosity, normal);
				if (inertia > 0) {
					vec2 viscosity = 0.5 * proximity_coefficient *
						(config.kLinearViscocity * inertia + config.kQuadraticViscocity * pow(inertia, 2)) *
						normal * dt;
					particles[org].applied_impulse -= viscosity;
				}
	
				// pressure
				float pressureM = config.k * (particles[org].density - config.restDensity + particles[index].density - config.restDensity);
				float nearPressureM = config.k_near * (particles[org].density_near + particles[index].density_near);
				vec2 pressure = dt * (pressureM * proximity_coefficient + nearPressureM * pow(proximity_coefficient, 2)) * normal;
				particles[org].applied_impulse -= pressure;
			}
		}
	}

	// threads
	for (int i = particle_threads[org].start; i < particle_threads[org].end; ++i) {
		vec2 vector = particles[pairs[i].second].position - particles[org].position;
		float thread_length = pairs[i].rest_length;
		float dist = length(vector);
		if (dist == 0) continue;

		vec2 normal = vector / dist;
		float stretch = (dist - thread_length) * dt * 8;
		particles[pairs[i].first].applied_impulse += normal * stretch;
	}
}
